from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Activation, Dropout, Flatten, Dense
from keras.preprocessing.image import ImageDataGenerator
import matplotlib
matplotlib.use('agg')
import matplotlib.pyplot as plt
import h5py

model = Sequential()
model.add(Conv2D(32, (3, 3), input_shape=(150, 150, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(32, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(64, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

# the model so far outputs 3D feature maps (height, width, features)

model.add(Flatten())  # this converts our 3D feature maps to 1D feature vectors
model.add(Dense(64))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(10))
model.add(Activation('softmax'))

model.compile(loss='categorical_crossentropy',
              optimizer='rmsprop',
              metrics=['accuracy'])
			 	  
batch_size = 16

# this is the augmentation configuration we will use for training
train_datagen = ImageDataGenerator(
        rescale=1./255,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True)

# this is the augmentation configuration we will use for testing:
# only rescaling
test_datagen = ImageDataGenerator(rescale=1./255)

# this is a generator that will read pictures found in
# subfolers of 'data/train', and indefinitely generate
# batches of augmented image data
train_generator = train_datagen.flow_from_directory(
        'FoodDataset/Images/SplitData/TrainingData',  # this is the target directory
        target_size=(150, 150),  # all images will be resized to 150x150
        batch_size=batch_size,
        class_mode='categorical')  # since we use categorical_crossentropy loss, we need categorical labels

# this is a similar generator, for validation data
validation_generator = test_datagen.flow_from_directory(
        'FoodDataset/Images/SplitData/ValidationData',
        target_size=(150, 150),
        batch_size=batch_size,
        class_mode='categorical')

		
history = model.fit_generator(
                train_generator,
                steps_per_epoch=2000 // batch_size,
                epochs=50,
                validation_data=validation_generator,
                validation_steps=800 // batch_size)
		
#history_dict = history.history
#train_loss_values = history_dict['loss']
#val_loss_values = history_dict['val_loss']

# Code for ploting results
#epochs = range(1, len(train_loss_values) + 1)
#plt.plot(epochs, train_loss_values, 'bo', label='Training loss')
#plt.plot(epochs, val_loss_values, 'r', label='Validation_loss')
#plt.legend()
#plt.xlabel('Epochs')
#plt.ylabel('Loss')
#plt.savefig('FoodDataCNN.png')

history_dict = history.history 
train_acc_values = history_dict['acc']
val_acc_values = history_dict['val_acc']

epochs = range(1, len(train_acc_values) + 1) 
plt.plot(epochs, train_acc_values, 'bo', label='Training acc')
plt.plot(epochs, val_acc_values, 'r', label='Validation_acc') 
plt.legend() 
plt.xlabel('Epochs') 
plt.ylabel('Accuracy')
plt.savefig('CNNAcc.png')

model.save("CNNTesting.h5")
print('Model saved.')
