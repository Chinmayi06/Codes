from keras.models import Sequential 
from keras.layers import Conv2D, MaxPooling2D 
from keras.layers import Activation, Dropout, Flatten, Dense
from keras.preprocessing.image import ImageDataGenerator 
from keras import applications 
import matplotlib
matplotlib.use('agg')
import matplotlib.pyplot as plt
import h5py

# This is the augmentation configuration we will use for training
train_datagen = ImageDataGenerator(
        rescale=1./255,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True)

# This is the augmentation configuration we will use for testing:
# Only rescaling
test_datagen = ImageDataGenerator(rescale=1./255)

# This is a generator that will read pictures found in subfolers of 'data/train', and indefinitely generate batches of augmented image data
train_generator = train_datagen.flow_from_directory(
        'FoodDataset/Images/SplitData/TrainingData',  # This is the target directory
        target_size=(150, 150),  # All images will be resized to 150x150
        batch_size=16,
        class_mode='categorical')  # Since we use categorical_crossentropy loss, we need categorical labels

# This is a similar generator, for validation data
validation_generator = test_datagen.flow_from_directory(
        'FoodDataset/Images/SplitData/ValidationData',
        target_size=(150, 150),
        batch_size=16,
        class_mode='categorical')
		
model = Sequential()
model.add(Flatten(input_shape=(150,150,3)))
model.add(Dense(256, activation='relu'))
model.add(Dense(256, activation='relu'))
model.add(Dense(10, activation='softmax' ))

model.compile(loss='categorical_crossentropy',
              optimizer='rmsprop',
              metrics=['accuracy'])
	
# This will train the model, pulling from the train and validation directories
history = model.fit_generator(
                train_generator,
                steps_per_epoch=2000 // 16,
                epochs=20,
                validation_data=validation_generator,
                validation_steps=800 // 16)

history_dict = history.history 
train_loss_values = history_dict['loss']
val_loss_values = history_dict['val_loss']

# Code for ploting results
epochs = range(1, len(train_loss_values) + 1) 
plt.plot(epochs, train_loss_values, 'bo', label='Training loss')
plt.plot(epochs, val_loss_values, 'r', label='Validation_loss') 
plt.legend() 
plt.xlabel('Epochs') 
plt.ylabel('Loss')
plt.savefig('FoodDataFF.png')

model.save("FFTesting.h5")
print('Model saved.')
